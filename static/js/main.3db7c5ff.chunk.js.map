{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onTodoSelected","selectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","query","onSetQuery","handleSetStatus","status","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","onResetSelectedTodo","useState","user","setUser","userIsLoading","setUserIsLoading","getUsersFromServer","a","usersFromServer","useEffect","href","email","name","App","setTodos","todosAreLoading","setTodosAreLoading","setSelectedTodo","setQuery","setStatus","getTodosFromServer","todosFromServer","visiableTodos","filter","toLowerCase","includes","trim","doesTitleMatch","doesStatusMatch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3db7c5ff.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  onTodoSelected: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    onTodoSelected,\n    selectedTodo,\n  },\n) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': selectedTodo?.id === todo.id,\n            })}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': todo.completed === false,\n                'has-text-success': todo.completed === true,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  onTodoSelected(todo);\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas', {\n                    'fa-eye': selectedTodo?.id !== todo.id,\n                    'fa-eye-slash': selectedTodo?.id === todo.id,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","type Props = {\n  query: string;\n  onSetQuery: (value:string) => void;\n  handleSetStatus: (value: string) => void;\n  status: string;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onSetQuery,\n  handleSetStatus,\n  status,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={event => {\n              handleSetStatus(event.target.value);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => (onSetQuery(event.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => (onSetQuery(''))}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number | undefined) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  selectedTodo: Todo | null;\n  onResetSelectedTodo: () => void;\n};\n  type Propspromise = (userId: number | undefined) => Promise<void>;\n\nexport const TodoModal: React.FC<Props> = (\n  {\n    selectedTodo,\n    onResetSelectedTodo,\n  },\n) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [userIsLoading, setUserIsLoading] = useState(true);\n\n  const getUsersFromServer: Propspromise = async (userId) => {\n    const usersFromServer = await getUser(userId);\n\n    setUser(usersFromServer);\n    setUserIsLoading(false);\n  };\n\n  useEffect(() => {\n    getUsersFromServer(selectedTodo?.userId);\n  }, []);\n\n  return (\n    <div\n      className=\"modal is-active\"\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {userIsLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onResetSelectedTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\ntype Props = () => Promise<void>;\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todosAreLoading, setTodosAreLoading] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState('all');\n  const getTodosFromServer: Props = async () => {\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n    setTodosAreLoading(false);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const onTodoSelected = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const onResetSelectedTodo = () => {\n    setSelectedTodo(null);\n  };\n\n  const handleSetQuery = (value: string) => {\n    setQuery(value);\n  };\n\n  const handleSetStatus = (value: string) => {\n    setStatus(value);\n  };\n\n  const doesTitleMatch = (todo: Todo) => (\n    todo.title.toLowerCase().includes(query.toLowerCase().trim()));\n\n  const doesStatusMatch = (todo: Todo) => {\n    switch (status) {\n      case 'completed':\n        return todo.completed === true;\n      case 'active':\n        return todo.completed === false;\n\n      default:\n        return 'all';\n    }\n  };\n\n  const visiableTodos = todos\n    .filter(todo => doesTitleMatch(todo) && doesStatusMatch(todo));\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onSetQuery={handleSetQuery}\n                handleSetStatus={handleSetStatus}\n                status={status}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todosAreLoading\n              && <Loader />}\n              <TodoList\n                todos={visiableTodos}\n                onTodoSelected={onTodoSelected}\n                selectedTodo={selectedTodo}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onResetSelectedTodo={onResetSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}